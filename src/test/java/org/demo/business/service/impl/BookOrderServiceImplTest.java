/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.BookOrder;
import org.demo.bean.jpa.BookOrderEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.BookOrderServiceMapper;
import org.demo.data.repository.jpa.BookOrderJpaRepository;
import org.demo.test.BookOrderFactoryForTest;
import org.demo.test.BookOrderEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BookOrderService
 */
@RunWith(MockitoJUnitRunner.class)
public class BookOrderServiceImplTest {

	@InjectMocks
	private BookOrderServiceImpl bookOrderService;
	@Mock
	private BookOrderJpaRepository bookOrderJpaRepository;
	@Mock
	private BookOrderServiceMapper bookOrderServiceMapper;
	
	private BookOrderFactoryForTest bookOrderFactoryForTest = new BookOrderFactoryForTest();

	private BookOrderEntityFactoryForTest bookOrderEntityFactoryForTest = new BookOrderEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		BookOrderEntity bookOrderEntity = bookOrderJpaRepository.findOne(id);
		
		BookOrder bookOrder = bookOrderFactoryForTest.newBookOrder();
		when(bookOrderServiceMapper.mapBookOrderEntityToBookOrder(bookOrderEntity)).thenReturn(bookOrder);

		// When
		BookOrder bookOrderFound = bookOrderService.findById(id);

		// Then
		assertEquals(bookOrder.getId(),bookOrderFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<BookOrderEntity> bookOrderEntitys = new ArrayList<BookOrderEntity>();
		BookOrderEntity bookOrderEntity1 = bookOrderEntityFactoryForTest.newBookOrderEntity();
		bookOrderEntitys.add(bookOrderEntity1);
		BookOrderEntity bookOrderEntity2 = bookOrderEntityFactoryForTest.newBookOrderEntity();
		bookOrderEntitys.add(bookOrderEntity2);
		when(bookOrderJpaRepository.findAll()).thenReturn(bookOrderEntitys);
		
		BookOrder bookOrder1 = bookOrderFactoryForTest.newBookOrder();
		when(bookOrderServiceMapper.mapBookOrderEntityToBookOrder(bookOrderEntity1)).thenReturn(bookOrder1);
		BookOrder bookOrder2 = bookOrderFactoryForTest.newBookOrder();
		when(bookOrderServiceMapper.mapBookOrderEntityToBookOrder(bookOrderEntity2)).thenReturn(bookOrder2);

		// When
		List<BookOrder> bookOrdersFounds = bookOrderService.findAll();

		// Then
		assertTrue(bookOrder1 == bookOrdersFounds.get(0));
		assertTrue(bookOrder2 == bookOrdersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		BookOrder bookOrder = bookOrderFactoryForTest.newBookOrder();

		BookOrderEntity bookOrderEntity = bookOrderEntityFactoryForTest.newBookOrderEntity();
		when(bookOrderJpaRepository.findOne(bookOrder.getId())).thenReturn(null);
		
		bookOrderEntity = new BookOrderEntity();
		bookOrderServiceMapper.mapBookOrderToBookOrderEntity(bookOrder, bookOrderEntity);
		BookOrderEntity bookOrderEntitySaved = bookOrderJpaRepository.save(bookOrderEntity);
		
		BookOrder bookOrderSaved = bookOrderFactoryForTest.newBookOrder();
		when(bookOrderServiceMapper.mapBookOrderEntityToBookOrder(bookOrderEntitySaved)).thenReturn(bookOrderSaved);

		// When
		BookOrder bookOrderResult = bookOrderService.create(bookOrder);

		// Then
		assertTrue(bookOrderResult == bookOrderSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		BookOrder bookOrder = bookOrderFactoryForTest.newBookOrder();

		BookOrderEntity bookOrderEntity = bookOrderEntityFactoryForTest.newBookOrderEntity();
		when(bookOrderJpaRepository.findOne(bookOrder.getId())).thenReturn(bookOrderEntity);

		// When
		Exception exception = null;
		try {
			bookOrderService.create(bookOrder);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		BookOrder bookOrder = bookOrderFactoryForTest.newBookOrder();

		BookOrderEntity bookOrderEntity = bookOrderEntityFactoryForTest.newBookOrderEntity();
		when(bookOrderJpaRepository.findOne(bookOrder.getId())).thenReturn(bookOrderEntity);
		
		BookOrderEntity bookOrderEntitySaved = bookOrderEntityFactoryForTest.newBookOrderEntity();
		when(bookOrderJpaRepository.save(bookOrderEntity)).thenReturn(bookOrderEntitySaved);
		
		BookOrder bookOrderSaved = bookOrderFactoryForTest.newBookOrder();
		when(bookOrderServiceMapper.mapBookOrderEntityToBookOrder(bookOrderEntitySaved)).thenReturn(bookOrderSaved);

		// When
		BookOrder bookOrderResult = bookOrderService.update(bookOrder);

		// Then
		verify(bookOrderServiceMapper).mapBookOrderToBookOrderEntity(bookOrder, bookOrderEntity);
		assertTrue(bookOrderResult == bookOrderSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		bookOrderService.delete(id);

		// Then
		verify(bookOrderJpaRepository).delete(id);
		
	}

}
