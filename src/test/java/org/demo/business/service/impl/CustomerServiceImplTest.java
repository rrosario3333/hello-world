/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Customer;
import org.demo.bean.jpa.CustomerEntity;
import java.util.List;
import org.demo.business.service.mapping.CustomerServiceMapper;
import org.demo.data.repository.jpa.CustomerJpaRepository;
import org.demo.test.CustomerFactoryForTest;
import org.demo.test.CustomerEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of CustomerService
 */
@RunWith(MockitoJUnitRunner.class)
public class CustomerServiceImplTest {

	@InjectMocks
	private CustomerServiceImpl customerService;
	@Mock
	private CustomerJpaRepository customerJpaRepository;
	@Mock
	private CustomerServiceMapper customerServiceMapper;
	
	private CustomerFactoryForTest customerFactoryForTest = new CustomerFactoryForTest();

	private CustomerEntityFactoryForTest customerEntityFactoryForTest = new CustomerEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String code = mockValues.nextString(5);
		
		CustomerEntity customerEntity = customerJpaRepository.findOne(code);
		
		Customer customer = customerFactoryForTest.newCustomer();
		when(customerServiceMapper.mapCustomerEntityToCustomer(customerEntity)).thenReturn(customer);

		// When
		Customer customerFound = customerService.findById(code);

		// Then
		assertEquals(customer.getCode(),customerFound.getCode());
	}

	@Test
	public void findAll() {
		// Given
		List<CustomerEntity> customerEntitys = new ArrayList<CustomerEntity>();
		CustomerEntity customerEntity1 = customerEntityFactoryForTest.newCustomerEntity();
		customerEntitys.add(customerEntity1);
		CustomerEntity customerEntity2 = customerEntityFactoryForTest.newCustomerEntity();
		customerEntitys.add(customerEntity2);
		when(customerJpaRepository.findAll()).thenReturn(customerEntitys);
		
		Customer customer1 = customerFactoryForTest.newCustomer();
		when(customerServiceMapper.mapCustomerEntityToCustomer(customerEntity1)).thenReturn(customer1);
		Customer customer2 = customerFactoryForTest.newCustomer();
		when(customerServiceMapper.mapCustomerEntityToCustomer(customerEntity2)).thenReturn(customer2);

		// When
		List<Customer> customersFounds = customerService.findAll();

		// Then
		assertTrue(customer1 == customersFounds.get(0));
		assertTrue(customer2 == customersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Customer customer = customerFactoryForTest.newCustomer();

		CustomerEntity customerEntity = customerEntityFactoryForTest.newCustomerEntity();
		when(customerJpaRepository.findOne(customer.getCode())).thenReturn(null);
		
		customerEntity = new CustomerEntity();
		customerServiceMapper.mapCustomerToCustomerEntity(customer, customerEntity);
		CustomerEntity customerEntitySaved = customerJpaRepository.save(customerEntity);
		
		Customer customerSaved = customerFactoryForTest.newCustomer();
		when(customerServiceMapper.mapCustomerEntityToCustomer(customerEntitySaved)).thenReturn(customerSaved);

		// When
		Customer customerResult = customerService.create(customer);

		// Then
		assertTrue(customerResult == customerSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Customer customer = customerFactoryForTest.newCustomer();

		CustomerEntity customerEntity = customerEntityFactoryForTest.newCustomerEntity();
		when(customerJpaRepository.findOne(customer.getCode())).thenReturn(customerEntity);

		// When
		Exception exception = null;
		try {
			customerService.create(customer);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Customer customer = customerFactoryForTest.newCustomer();

		CustomerEntity customerEntity = customerEntityFactoryForTest.newCustomerEntity();
		when(customerJpaRepository.findOne(customer.getCode())).thenReturn(customerEntity);
		
		CustomerEntity customerEntitySaved = customerEntityFactoryForTest.newCustomerEntity();
		when(customerJpaRepository.save(customerEntity)).thenReturn(customerEntitySaved);
		
		Customer customerSaved = customerFactoryForTest.newCustomer();
		when(customerServiceMapper.mapCustomerEntityToCustomer(customerEntitySaved)).thenReturn(customerSaved);

		// When
		Customer customerResult = customerService.update(customer);

		// Then
		verify(customerServiceMapper).mapCustomerToCustomerEntity(customer, customerEntity);
		assertTrue(customerResult == customerSaved);
	}

	@Test
	public void delete() {
		// Given
		String code = mockValues.nextString(5);

		// When
		customerService.delete(code);

		// Then
		verify(customerJpaRepository).delete(code);
		
	}

}
