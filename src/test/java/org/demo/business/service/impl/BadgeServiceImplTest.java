/*
 * Created on 3 avr. 2014 ( Time 19:39:41 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Badge;
import org.demo.bean.jpa.BadgeEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.BadgeServiceMapper;
import org.demo.data.repository.jpa.BadgeJpaRepository;
import org.demo.test.BadgeFactoryForTest;
import org.demo.test.BadgeEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BadgeService
 */
@RunWith(MockitoJUnitRunner.class)
public class BadgeServiceImplTest {

	@InjectMocks
	private BadgeServiceImpl badgeService;
	@Mock
	private BadgeJpaRepository badgeJpaRepository;
	@Mock
	private BadgeServiceMapper badgeServiceMapper;
	
	private BadgeFactoryForTest badgeFactoryForTest = new BadgeFactoryForTest();

	private BadgeEntityFactoryForTest badgeEntityFactoryForTest = new BadgeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer badgeNumber = mockValues.nextInteger();
		
		BadgeEntity badgeEntity = badgeJpaRepository.findOne(badgeNumber);
		
		Badge badge = badgeFactoryForTest.newBadge();
		when(badgeServiceMapper.mapBadgeEntityToBadge(badgeEntity)).thenReturn(badge);

		// When
		Badge badgeFound = badgeService.findById(badgeNumber);

		// Then
		assertEquals(badge.getBadgeNumber(),badgeFound.getBadgeNumber());
	}

	@Test
	public void findAll() {
		// Given
		List<BadgeEntity> badgeEntitys = new ArrayList<BadgeEntity>();
		BadgeEntity badgeEntity1 = badgeEntityFactoryForTest.newBadgeEntity();
		badgeEntitys.add(badgeEntity1);
		BadgeEntity badgeEntity2 = badgeEntityFactoryForTest.newBadgeEntity();
		badgeEntitys.add(badgeEntity2);
		when(badgeJpaRepository.findAll()).thenReturn(badgeEntitys);
		
		Badge badge1 = badgeFactoryForTest.newBadge();
		when(badgeServiceMapper.mapBadgeEntityToBadge(badgeEntity1)).thenReturn(badge1);
		Badge badge2 = badgeFactoryForTest.newBadge();
		when(badgeServiceMapper.mapBadgeEntityToBadge(badgeEntity2)).thenReturn(badge2);

		// When
		List<Badge> badgesFounds = badgeService.findAll();

		// Then
		assertTrue(badge1 == badgesFounds.get(0));
		assertTrue(badge2 == badgesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Badge badge = badgeFactoryForTest.newBadge();

		BadgeEntity badgeEntity = badgeEntityFactoryForTest.newBadgeEntity();
		when(badgeJpaRepository.findOne(badge.getBadgeNumber())).thenReturn(null);
		
		badgeEntity = new BadgeEntity();
		badgeServiceMapper.mapBadgeToBadgeEntity(badge, badgeEntity);
		BadgeEntity badgeEntitySaved = badgeJpaRepository.save(badgeEntity);
		
		Badge badgeSaved = badgeFactoryForTest.newBadge();
		when(badgeServiceMapper.mapBadgeEntityToBadge(badgeEntitySaved)).thenReturn(badgeSaved);

		// When
		Badge badgeResult = badgeService.create(badge);

		// Then
		assertTrue(badgeResult == badgeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Badge badge = badgeFactoryForTest.newBadge();

		BadgeEntity badgeEntity = badgeEntityFactoryForTest.newBadgeEntity();
		when(badgeJpaRepository.findOne(badge.getBadgeNumber())).thenReturn(badgeEntity);

		// When
		Exception exception = null;
		try {
			badgeService.create(badge);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Badge badge = badgeFactoryForTest.newBadge();

		BadgeEntity badgeEntity = badgeEntityFactoryForTest.newBadgeEntity();
		when(badgeJpaRepository.findOne(badge.getBadgeNumber())).thenReturn(badgeEntity);
		
		BadgeEntity badgeEntitySaved = badgeEntityFactoryForTest.newBadgeEntity();
		when(badgeJpaRepository.save(badgeEntity)).thenReturn(badgeEntitySaved);
		
		Badge badgeSaved = badgeFactoryForTest.newBadge();
		when(badgeServiceMapper.mapBadgeEntityToBadge(badgeEntitySaved)).thenReturn(badgeSaved);

		// When
		Badge badgeResult = badgeService.update(badge);

		// Then
		verify(badgeServiceMapper).mapBadgeToBadgeEntity(badge, badgeEntity);
		assertTrue(badgeResult == badgeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer badgeNumber = mockValues.nextInteger();

		// When
		badgeService.delete(badgeNumber);

		// Then
		verify(badgeJpaRepository).delete(badgeNumber);
		
	}

}
