/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.EmployeeGroup;
import org.demo.bean.jpa.EmployeeGroupEntity;
import org.demo.bean.jpa.EmployeeGroupEntityKey;
import org.demo.business.service.mapping.EmployeeGroupServiceMapper;
import org.demo.data.repository.jpa.EmployeeGroupJpaRepository;
import org.demo.test.EmployeeGroupFactoryForTest;
import org.demo.test.EmployeeGroupEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of EmployeeGroupService
 */
@RunWith(MockitoJUnitRunner.class)
public class EmployeeGroupServiceImplTest {

	@InjectMocks
	private EmployeeGroupServiceImpl employeeGroupService;
	@Mock
	private EmployeeGroupJpaRepository employeeGroupJpaRepository;
	@Mock
	private EmployeeGroupServiceMapper employeeGroupServiceMapper;
	
	private EmployeeGroupFactoryForTest employeeGroupFactoryForTest = new EmployeeGroupFactoryForTest();

	private EmployeeGroupEntityFactoryForTest employeeGroupEntityFactoryForTest = new EmployeeGroupEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String employeeCode = mockValues.nextString(4);
		Short groupId = mockValues.nextShort();
		
		EmployeeGroupEntityKey employeeGroupEntityKey = new EmployeeGroupEntityKey(employeeCode, groupId);
		employeeGroupEntityKey.setEmployeeCode(employeeCode);
		employeeGroupEntityKey.setGroupId(groupId);
		
		EmployeeGroupEntity employeeGroupEntity = employeeGroupJpaRepository.findOne(employeeGroupEntityKey);
		
		EmployeeGroup employeeGroup = employeeGroupFactoryForTest.newEmployeeGroup();
		when(employeeGroupServiceMapper.mapEmployeeGroupEntityToEmployeeGroup(employeeGroupEntity)).thenReturn(employeeGroup);

		// When
		EmployeeGroup employeeGroupFound = employeeGroupService.findById(employeeCode, groupId);

		// Then
		assertEquals(employeeGroup.getEmployeeCode(),employeeGroupFound.getEmployeeCode());
		assertEquals(employeeGroup.getGroupId(),employeeGroupFound.getGroupId());
	}

	@Test
	public void findAll() {
		// Given
		List<EmployeeGroupEntity> employeeGroupEntitys = new ArrayList<EmployeeGroupEntity>();
		EmployeeGroupEntity employeeGroupEntity1 = employeeGroupEntityFactoryForTest.newEmployeeGroupEntity();
		employeeGroupEntitys.add(employeeGroupEntity1);
		EmployeeGroupEntity employeeGroupEntity2 = employeeGroupEntityFactoryForTest.newEmployeeGroupEntity();
		employeeGroupEntitys.add(employeeGroupEntity2);
		when(employeeGroupJpaRepository.findAll()).thenReturn(employeeGroupEntitys);
		
		EmployeeGroup employeeGroup1 = employeeGroupFactoryForTest.newEmployeeGroup();
		when(employeeGroupServiceMapper.mapEmployeeGroupEntityToEmployeeGroup(employeeGroupEntity1)).thenReturn(employeeGroup1);
		EmployeeGroup employeeGroup2 = employeeGroupFactoryForTest.newEmployeeGroup();
		when(employeeGroupServiceMapper.mapEmployeeGroupEntityToEmployeeGroup(employeeGroupEntity2)).thenReturn(employeeGroup2);

		// When
		List<EmployeeGroup> employeeGroupsFounds = employeeGroupService.findAll();

		// Then
		assertTrue(employeeGroup1 == employeeGroupsFounds.get(0));
		assertTrue(employeeGroup2 == employeeGroupsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		EmployeeGroup employeeGroup = employeeGroupFactoryForTest.newEmployeeGroup();

		EmployeeGroupEntityKey id = new EmployeeGroupEntityKey(employeeGroup.getEmployeeCode(), employeeGroup.getGroupId());
		EmployeeGroupEntity employeeGroupEntity = employeeGroupEntityFactoryForTest.newEmployeeGroupEntity();
		when(employeeGroupJpaRepository.findOne(id)).thenReturn(null);
		
		employeeGroupEntity = new EmployeeGroupEntity();
		employeeGroupServiceMapper.mapEmployeeGroupToEmployeeGroupEntity(employeeGroup, employeeGroupEntity);
		EmployeeGroupEntity employeeGroupEntitySaved = employeeGroupJpaRepository.save(employeeGroupEntity);
		
		EmployeeGroup employeeGroupSaved = employeeGroupFactoryForTest.newEmployeeGroup();
		when(employeeGroupServiceMapper.mapEmployeeGroupEntityToEmployeeGroup(employeeGroupEntitySaved)).thenReturn(employeeGroupSaved);

		// When
		EmployeeGroup employeeGroupResult = employeeGroupService.create(employeeGroup);

		// Then
		assertTrue(employeeGroupResult == employeeGroupSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		EmployeeGroup employeeGroup = employeeGroupFactoryForTest.newEmployeeGroup();

		EmployeeGroupEntityKey id = new EmployeeGroupEntityKey(employeeGroup.getEmployeeCode(), employeeGroup.getGroupId());
		EmployeeGroupEntity employeeGroupEntity = employeeGroupEntityFactoryForTest.newEmployeeGroupEntity();
		when(employeeGroupJpaRepository.findOne(id)).thenReturn(employeeGroupEntity);

		// When
		Exception exception = null;
		try {
			employeeGroupService.create(employeeGroup);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		EmployeeGroup employeeGroup = employeeGroupFactoryForTest.newEmployeeGroup();

		EmployeeGroupEntityKey id = new EmployeeGroupEntityKey(employeeGroup.getEmployeeCode(), employeeGroup.getGroupId());
		EmployeeGroupEntity employeeGroupEntity = employeeGroupEntityFactoryForTest.newEmployeeGroupEntity();
		when(employeeGroupJpaRepository.findOne(id)).thenReturn(employeeGroupEntity);
		
		EmployeeGroupEntity employeeGroupEntitySaved = employeeGroupEntityFactoryForTest.newEmployeeGroupEntity();
		when(employeeGroupJpaRepository.save(employeeGroupEntity)).thenReturn(employeeGroupEntitySaved);
		
		EmployeeGroup employeeGroupSaved = employeeGroupFactoryForTest.newEmployeeGroup();
		when(employeeGroupServiceMapper.mapEmployeeGroupEntityToEmployeeGroup(employeeGroupEntitySaved)).thenReturn(employeeGroupSaved);

		// When
		EmployeeGroup employeeGroupResult = employeeGroupService.update(employeeGroup);

		// Then
		verify(employeeGroupServiceMapper).mapEmployeeGroupToEmployeeGroupEntity(employeeGroup, employeeGroupEntity);
		assertTrue(employeeGroupResult == employeeGroupSaved);
	}

	@Test
	public void delete() {
		// Given
		String employeeCode = mockValues.nextString(4);
		Short groupId = mockValues.nextShort();
		EmployeeGroupEntityKey employeeGroupEntityKey = new EmployeeGroupEntityKey(employeeCode, groupId);

		// When
		employeeGroupService.delete(employeeCode, groupId);

		// Then
		verify(employeeGroupJpaRepository).delete(employeeGroupEntityKey);
		
	}

}
