/*
 * Created on 3 avr. 2014 ( Time 19:39:41 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Author;
import org.demo.bean.jpa.AuthorEntity;
import java.util.List;
import org.demo.business.service.mapping.AuthorServiceMapper;
import org.demo.data.repository.jpa.AuthorJpaRepository;
import org.demo.test.AuthorFactoryForTest;
import org.demo.test.AuthorEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AuthorService
 */
@RunWith(MockitoJUnitRunner.class)
public class AuthorServiceImplTest {

	@InjectMocks
	private AuthorServiceImpl authorService;
	@Mock
	private AuthorJpaRepository authorJpaRepository;
	@Mock
	private AuthorServiceMapper authorServiceMapper;
	
	private AuthorFactoryForTest authorFactoryForTest = new AuthorFactoryForTest();

	private AuthorEntityFactoryForTest authorEntityFactoryForTest = new AuthorEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AuthorEntity authorEntity = authorJpaRepository.findOne(id);
		
		Author author = authorFactoryForTest.newAuthor();
		when(authorServiceMapper.mapAuthorEntityToAuthor(authorEntity)).thenReturn(author);

		// When
		Author authorFound = authorService.findById(id);

		// Then
		assertEquals(author.getId(),authorFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AuthorEntity> authorEntitys = new ArrayList<AuthorEntity>();
		AuthorEntity authorEntity1 = authorEntityFactoryForTest.newAuthorEntity();
		authorEntitys.add(authorEntity1);
		AuthorEntity authorEntity2 = authorEntityFactoryForTest.newAuthorEntity();
		authorEntitys.add(authorEntity2);
		when(authorJpaRepository.findAll()).thenReturn(authorEntitys);
		
		Author author1 = authorFactoryForTest.newAuthor();
		when(authorServiceMapper.mapAuthorEntityToAuthor(authorEntity1)).thenReturn(author1);
		Author author2 = authorFactoryForTest.newAuthor();
		when(authorServiceMapper.mapAuthorEntityToAuthor(authorEntity2)).thenReturn(author2);

		// When
		List<Author> authorsFounds = authorService.findAll();

		// Then
		assertTrue(author1 == authorsFounds.get(0));
		assertTrue(author2 == authorsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Author author = authorFactoryForTest.newAuthor();

		AuthorEntity authorEntity = authorEntityFactoryForTest.newAuthorEntity();
		when(authorJpaRepository.findOne(author.getId())).thenReturn(null);
		
		authorEntity = new AuthorEntity();
		authorServiceMapper.mapAuthorToAuthorEntity(author, authorEntity);
		AuthorEntity authorEntitySaved = authorJpaRepository.save(authorEntity);
		
		Author authorSaved = authorFactoryForTest.newAuthor();
		when(authorServiceMapper.mapAuthorEntityToAuthor(authorEntitySaved)).thenReturn(authorSaved);

		// When
		Author authorResult = authorService.create(author);

		// Then
		assertTrue(authorResult == authorSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Author author = authorFactoryForTest.newAuthor();

		AuthorEntity authorEntity = authorEntityFactoryForTest.newAuthorEntity();
		when(authorJpaRepository.findOne(author.getId())).thenReturn(authorEntity);

		// When
		Exception exception = null;
		try {
			authorService.create(author);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Author author = authorFactoryForTest.newAuthor();

		AuthorEntity authorEntity = authorEntityFactoryForTest.newAuthorEntity();
		when(authorJpaRepository.findOne(author.getId())).thenReturn(authorEntity);
		
		AuthorEntity authorEntitySaved = authorEntityFactoryForTest.newAuthorEntity();
		when(authorJpaRepository.save(authorEntity)).thenReturn(authorEntitySaved);
		
		Author authorSaved = authorFactoryForTest.newAuthor();
		when(authorServiceMapper.mapAuthorEntityToAuthor(authorEntitySaved)).thenReturn(authorSaved);

		// When
		Author authorResult = authorService.update(author);

		// Then
		verify(authorServiceMapper).mapAuthorToAuthorEntity(author, authorEntity);
		assertTrue(authorResult == authorSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		authorService.delete(id);

		// Then
		verify(authorJpaRepository).delete(id);
		
	}

}
