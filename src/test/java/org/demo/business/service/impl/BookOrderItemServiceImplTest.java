/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.BookOrderItem;
import org.demo.bean.jpa.BookOrderItemEntity;
import org.demo.bean.jpa.BookOrderItemEntityKey;
import java.math.BigDecimal;
import org.demo.business.service.mapping.BookOrderItemServiceMapper;
import org.demo.data.repository.jpa.BookOrderItemJpaRepository;
import org.demo.test.BookOrderItemFactoryForTest;
import org.demo.test.BookOrderItemEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BookOrderItemService
 */
@RunWith(MockitoJUnitRunner.class)
public class BookOrderItemServiceImplTest {

	@InjectMocks
	private BookOrderItemServiceImpl bookOrderItemService;
	@Mock
	private BookOrderItemJpaRepository bookOrderItemJpaRepository;
	@Mock
	private BookOrderItemServiceMapper bookOrderItemServiceMapper;
	
	private BookOrderItemFactoryForTest bookOrderItemFactoryForTest = new BookOrderItemFactoryForTest();

	private BookOrderItemEntityFactoryForTest bookOrderItemEntityFactoryForTest = new BookOrderItemEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer bookOrderId = mockValues.nextInteger();
		Integer bookId = mockValues.nextInteger();
		
		BookOrderItemEntityKey bookOrderItemEntityKey = new BookOrderItemEntityKey(bookOrderId, bookId);
		bookOrderItemEntityKey.setBookOrderId(bookOrderId);
		bookOrderItemEntityKey.setBookId(bookId);
		
		BookOrderItemEntity bookOrderItemEntity = bookOrderItemJpaRepository.findOne(bookOrderItemEntityKey);
		
		BookOrderItem bookOrderItem = bookOrderItemFactoryForTest.newBookOrderItem();
		when(bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntity)).thenReturn(bookOrderItem);

		// When
		BookOrderItem bookOrderItemFound = bookOrderItemService.findById(bookOrderId, bookId);

		// Then
		assertEquals(bookOrderItem.getBookOrderId(),bookOrderItemFound.getBookOrderId());
		assertEquals(bookOrderItem.getBookId(),bookOrderItemFound.getBookId());
	}

	@Test
	public void findAll() {
		// Given
		List<BookOrderItemEntity> bookOrderItemEntitys = new ArrayList<BookOrderItemEntity>();
		BookOrderItemEntity bookOrderItemEntity1 = bookOrderItemEntityFactoryForTest.newBookOrderItemEntity();
		bookOrderItemEntitys.add(bookOrderItemEntity1);
		BookOrderItemEntity bookOrderItemEntity2 = bookOrderItemEntityFactoryForTest.newBookOrderItemEntity();
		bookOrderItemEntitys.add(bookOrderItemEntity2);
		when(bookOrderItemJpaRepository.findAll()).thenReturn(bookOrderItemEntitys);
		
		BookOrderItem bookOrderItem1 = bookOrderItemFactoryForTest.newBookOrderItem();
		when(bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntity1)).thenReturn(bookOrderItem1);
		BookOrderItem bookOrderItem2 = bookOrderItemFactoryForTest.newBookOrderItem();
		when(bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntity2)).thenReturn(bookOrderItem2);

		// When
		List<BookOrderItem> bookOrderItemsFounds = bookOrderItemService.findAll();

		// Then
		assertTrue(bookOrderItem1 == bookOrderItemsFounds.get(0));
		assertTrue(bookOrderItem2 == bookOrderItemsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		BookOrderItem bookOrderItem = bookOrderItemFactoryForTest.newBookOrderItem();

		BookOrderItemEntityKey id = new BookOrderItemEntityKey(bookOrderItem.getBookOrderId(), bookOrderItem.getBookId());
		BookOrderItemEntity bookOrderItemEntity = bookOrderItemEntityFactoryForTest.newBookOrderItemEntity();
		when(bookOrderItemJpaRepository.findOne(id)).thenReturn(null);
		
		bookOrderItemEntity = new BookOrderItemEntity();
		bookOrderItemServiceMapper.mapBookOrderItemToBookOrderItemEntity(bookOrderItem, bookOrderItemEntity);
		BookOrderItemEntity bookOrderItemEntitySaved = bookOrderItemJpaRepository.save(bookOrderItemEntity);
		
		BookOrderItem bookOrderItemSaved = bookOrderItemFactoryForTest.newBookOrderItem();
		when(bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntitySaved)).thenReturn(bookOrderItemSaved);

		// When
		BookOrderItem bookOrderItemResult = bookOrderItemService.create(bookOrderItem);

		// Then
		assertTrue(bookOrderItemResult == bookOrderItemSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		BookOrderItem bookOrderItem = bookOrderItemFactoryForTest.newBookOrderItem();

		BookOrderItemEntityKey id = new BookOrderItemEntityKey(bookOrderItem.getBookOrderId(), bookOrderItem.getBookId());
		BookOrderItemEntity bookOrderItemEntity = bookOrderItemEntityFactoryForTest.newBookOrderItemEntity();
		when(bookOrderItemJpaRepository.findOne(id)).thenReturn(bookOrderItemEntity);

		// When
		Exception exception = null;
		try {
			bookOrderItemService.create(bookOrderItem);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		BookOrderItem bookOrderItem = bookOrderItemFactoryForTest.newBookOrderItem();

		BookOrderItemEntityKey id = new BookOrderItemEntityKey(bookOrderItem.getBookOrderId(), bookOrderItem.getBookId());
		BookOrderItemEntity bookOrderItemEntity = bookOrderItemEntityFactoryForTest.newBookOrderItemEntity();
		when(bookOrderItemJpaRepository.findOne(id)).thenReturn(bookOrderItemEntity);
		
		BookOrderItemEntity bookOrderItemEntitySaved = bookOrderItemEntityFactoryForTest.newBookOrderItemEntity();
		when(bookOrderItemJpaRepository.save(bookOrderItemEntity)).thenReturn(bookOrderItemEntitySaved);
		
		BookOrderItem bookOrderItemSaved = bookOrderItemFactoryForTest.newBookOrderItem();
		when(bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntitySaved)).thenReturn(bookOrderItemSaved);

		// When
		BookOrderItem bookOrderItemResult = bookOrderItemService.update(bookOrderItem);

		// Then
		verify(bookOrderItemServiceMapper).mapBookOrderItemToBookOrderItemEntity(bookOrderItem, bookOrderItemEntity);
		assertTrue(bookOrderItemResult == bookOrderItemSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer bookOrderId = mockValues.nextInteger();
		Integer bookId = mockValues.nextInteger();
		BookOrderItemEntityKey bookOrderItemEntityKey = new BookOrderItemEntityKey(bookOrderId, bookId);

		// When
		bookOrderItemService.delete(bookOrderId, bookId);

		// Then
		verify(bookOrderItemJpaRepository).delete(bookOrderItemEntityKey);
		
	}

}
