/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Publisher;
import org.demo.bean.jpa.PublisherEntity;
import java.util.List;
import org.demo.business.service.mapping.PublisherServiceMapper;
import org.demo.data.repository.jpa.PublisherJpaRepository;
import org.demo.test.PublisherFactoryForTest;
import org.demo.test.PublisherEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PublisherService
 */
@RunWith(MockitoJUnitRunner.class)
public class PublisherServiceImplTest {

	@InjectMocks
	private PublisherServiceImpl publisherService;
	@Mock
	private PublisherJpaRepository publisherJpaRepository;
	@Mock
	private PublisherServiceMapper publisherServiceMapper;
	
	private PublisherFactoryForTest publisherFactoryForTest = new PublisherFactoryForTest();

	private PublisherEntityFactoryForTest publisherEntityFactoryForTest = new PublisherEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer code = mockValues.nextInteger();
		
		PublisherEntity publisherEntity = publisherJpaRepository.findOne(code);
		
		Publisher publisher = publisherFactoryForTest.newPublisher();
		when(publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntity)).thenReturn(publisher);

		// When
		Publisher publisherFound = publisherService.findById(code);

		// Then
		assertEquals(publisher.getCode(),publisherFound.getCode());
	}

	@Test
	public void findAll() {
		// Given
		List<PublisherEntity> publisherEntitys = new ArrayList<PublisherEntity>();
		PublisherEntity publisherEntity1 = publisherEntityFactoryForTest.newPublisherEntity();
		publisherEntitys.add(publisherEntity1);
		PublisherEntity publisherEntity2 = publisherEntityFactoryForTest.newPublisherEntity();
		publisherEntitys.add(publisherEntity2);
		when(publisherJpaRepository.findAll()).thenReturn(publisherEntitys);
		
		Publisher publisher1 = publisherFactoryForTest.newPublisher();
		when(publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntity1)).thenReturn(publisher1);
		Publisher publisher2 = publisherFactoryForTest.newPublisher();
		when(publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntity2)).thenReturn(publisher2);

		// When
		List<Publisher> publishersFounds = publisherService.findAll();

		// Then
		assertTrue(publisher1 == publishersFounds.get(0));
		assertTrue(publisher2 == publishersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Publisher publisher = publisherFactoryForTest.newPublisher();

		PublisherEntity publisherEntity = publisherEntityFactoryForTest.newPublisherEntity();
		when(publisherJpaRepository.findOne(publisher.getCode())).thenReturn(null);
		
		publisherEntity = new PublisherEntity();
		publisherServiceMapper.mapPublisherToPublisherEntity(publisher, publisherEntity);
		PublisherEntity publisherEntitySaved = publisherJpaRepository.save(publisherEntity);
		
		Publisher publisherSaved = publisherFactoryForTest.newPublisher();
		when(publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntitySaved)).thenReturn(publisherSaved);

		// When
		Publisher publisherResult = publisherService.create(publisher);

		// Then
		assertTrue(publisherResult == publisherSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Publisher publisher = publisherFactoryForTest.newPublisher();

		PublisherEntity publisherEntity = publisherEntityFactoryForTest.newPublisherEntity();
		when(publisherJpaRepository.findOne(publisher.getCode())).thenReturn(publisherEntity);

		// When
		Exception exception = null;
		try {
			publisherService.create(publisher);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Publisher publisher = publisherFactoryForTest.newPublisher();

		PublisherEntity publisherEntity = publisherEntityFactoryForTest.newPublisherEntity();
		when(publisherJpaRepository.findOne(publisher.getCode())).thenReturn(publisherEntity);
		
		PublisherEntity publisherEntitySaved = publisherEntityFactoryForTest.newPublisherEntity();
		when(publisherJpaRepository.save(publisherEntity)).thenReturn(publisherEntitySaved);
		
		Publisher publisherSaved = publisherFactoryForTest.newPublisher();
		when(publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntitySaved)).thenReturn(publisherSaved);

		// When
		Publisher publisherResult = publisherService.update(publisher);

		// Then
		verify(publisherServiceMapper).mapPublisherToPublisherEntity(publisher, publisherEntity);
		assertTrue(publisherResult == publisherSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer code = mockValues.nextInteger();

		// When
		publisherService.delete(code);

		// Then
		verify(publisherJpaRepository).delete(code);
		
	}

}
