/*
 * Created on 3 avr. 2014 ( Time 19:39:43 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Review;
import org.demo.bean.jpa.ReviewEntity;
import org.demo.bean.jpa.ReviewEntityKey;
import java.util.Date;
import org.demo.business.service.mapping.ReviewServiceMapper;
import org.demo.data.repository.jpa.ReviewJpaRepository;
import org.demo.test.ReviewFactoryForTest;
import org.demo.test.ReviewEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ReviewService
 */
@RunWith(MockitoJUnitRunner.class)
public class ReviewServiceImplTest {

	@InjectMocks
	private ReviewServiceImpl reviewService;
	@Mock
	private ReviewJpaRepository reviewJpaRepository;
	@Mock
	private ReviewServiceMapper reviewServiceMapper;
	
	private ReviewFactoryForTest reviewFactoryForTest = new ReviewFactoryForTest();

	private ReviewEntityFactoryForTest reviewEntityFactoryForTest = new ReviewEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String customerCode = mockValues.nextString(5);
		Integer bookId = mockValues.nextInteger();
		
		ReviewEntityKey reviewEntityKey = new ReviewEntityKey(customerCode, bookId);
		reviewEntityKey.setCustomerCode(customerCode);
		reviewEntityKey.setBookId(bookId);
		
		ReviewEntity reviewEntity = reviewJpaRepository.findOne(reviewEntityKey);
		
		Review review = reviewFactoryForTest.newReview();
		when(reviewServiceMapper.mapReviewEntityToReview(reviewEntity)).thenReturn(review);

		// When
		Review reviewFound = reviewService.findById(customerCode, bookId);

		// Then
		assertEquals(review.getCustomerCode(),reviewFound.getCustomerCode());
		assertEquals(review.getBookId(),reviewFound.getBookId());
	}

	@Test
	public void findAll() {
		// Given
		List<ReviewEntity> reviewEntitys = new ArrayList<ReviewEntity>();
		ReviewEntity reviewEntity1 = reviewEntityFactoryForTest.newReviewEntity();
		reviewEntitys.add(reviewEntity1);
		ReviewEntity reviewEntity2 = reviewEntityFactoryForTest.newReviewEntity();
		reviewEntitys.add(reviewEntity2);
		when(reviewJpaRepository.findAll()).thenReturn(reviewEntitys);
		
		Review review1 = reviewFactoryForTest.newReview();
		when(reviewServiceMapper.mapReviewEntityToReview(reviewEntity1)).thenReturn(review1);
		Review review2 = reviewFactoryForTest.newReview();
		when(reviewServiceMapper.mapReviewEntityToReview(reviewEntity2)).thenReturn(review2);

		// When
		List<Review> reviewsFounds = reviewService.findAll();

		// Then
		assertTrue(review1 == reviewsFounds.get(0));
		assertTrue(review2 == reviewsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Review review = reviewFactoryForTest.newReview();

		ReviewEntityKey id = new ReviewEntityKey(review.getCustomerCode(), review.getBookId());
		ReviewEntity reviewEntity = reviewEntityFactoryForTest.newReviewEntity();
		when(reviewJpaRepository.findOne(id)).thenReturn(null);
		
		reviewEntity = new ReviewEntity();
		reviewServiceMapper.mapReviewToReviewEntity(review, reviewEntity);
		ReviewEntity reviewEntitySaved = reviewJpaRepository.save(reviewEntity);
		
		Review reviewSaved = reviewFactoryForTest.newReview();
		when(reviewServiceMapper.mapReviewEntityToReview(reviewEntitySaved)).thenReturn(reviewSaved);

		// When
		Review reviewResult = reviewService.create(review);

		// Then
		assertTrue(reviewResult == reviewSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Review review = reviewFactoryForTest.newReview();

		ReviewEntityKey id = new ReviewEntityKey(review.getCustomerCode(), review.getBookId());
		ReviewEntity reviewEntity = reviewEntityFactoryForTest.newReviewEntity();
		when(reviewJpaRepository.findOne(id)).thenReturn(reviewEntity);

		// When
		Exception exception = null;
		try {
			reviewService.create(review);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Review review = reviewFactoryForTest.newReview();

		ReviewEntityKey id = new ReviewEntityKey(review.getCustomerCode(), review.getBookId());
		ReviewEntity reviewEntity = reviewEntityFactoryForTest.newReviewEntity();
		when(reviewJpaRepository.findOne(id)).thenReturn(reviewEntity);
		
		ReviewEntity reviewEntitySaved = reviewEntityFactoryForTest.newReviewEntity();
		when(reviewJpaRepository.save(reviewEntity)).thenReturn(reviewEntitySaved);
		
		Review reviewSaved = reviewFactoryForTest.newReview();
		when(reviewServiceMapper.mapReviewEntityToReview(reviewEntitySaved)).thenReturn(reviewSaved);

		// When
		Review reviewResult = reviewService.update(review);

		// Then
		verify(reviewServiceMapper).mapReviewToReviewEntity(review, reviewEntity);
		assertTrue(reviewResult == reviewSaved);
	}

	@Test
	public void delete() {
		// Given
		String customerCode = mockValues.nextString(5);
		Integer bookId = mockValues.nextInteger();
		ReviewEntityKey reviewEntityKey = new ReviewEntityKey(customerCode, bookId);

		// When
		reviewService.delete(customerCode, bookId);

		// Then
		verify(reviewJpaRepository).delete(reviewEntityKey);
		
	}

}
