/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Country;
import org.demo.bean.jpa.CountryEntity;
import java.util.List;
import org.demo.business.service.mapping.CountryServiceMapper;
import org.demo.data.repository.jpa.CountryJpaRepository;
import org.demo.test.CountryFactoryForTest;
import org.demo.test.CountryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of CountryService
 */
@RunWith(MockitoJUnitRunner.class)
public class CountryServiceImplTest {

	@InjectMocks
	private CountryServiceImpl countryService;
	@Mock
	private CountryJpaRepository countryJpaRepository;
	@Mock
	private CountryServiceMapper countryServiceMapper;
	
	private CountryFactoryForTest countryFactoryForTest = new CountryFactoryForTest();

	private CountryEntityFactoryForTest countryEntityFactoryForTest = new CountryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String code = mockValues.nextString(2);
		
		CountryEntity countryEntity = countryJpaRepository.findOne(code);
		
		Country country = countryFactoryForTest.newCountry();
		when(countryServiceMapper.mapCountryEntityToCountry(countryEntity)).thenReturn(country);

		// When
		Country countryFound = countryService.findById(code);

		// Then
		assertEquals(country.getCode(),countryFound.getCode());
	}

	@Test
	public void findAll() {
		// Given
		List<CountryEntity> countryEntitys = new ArrayList<CountryEntity>();
		CountryEntity countryEntity1 = countryEntityFactoryForTest.newCountryEntity();
		countryEntitys.add(countryEntity1);
		CountryEntity countryEntity2 = countryEntityFactoryForTest.newCountryEntity();
		countryEntitys.add(countryEntity2);
		when(countryJpaRepository.findAll()).thenReturn(countryEntitys);
		
		Country country1 = countryFactoryForTest.newCountry();
		when(countryServiceMapper.mapCountryEntityToCountry(countryEntity1)).thenReturn(country1);
		Country country2 = countryFactoryForTest.newCountry();
		when(countryServiceMapper.mapCountryEntityToCountry(countryEntity2)).thenReturn(country2);

		// When
		List<Country> countrysFounds = countryService.findAll();

		// Then
		assertTrue(country1 == countrysFounds.get(0));
		assertTrue(country2 == countrysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Country country = countryFactoryForTest.newCountry();

		CountryEntity countryEntity = countryEntityFactoryForTest.newCountryEntity();
		when(countryJpaRepository.findOne(country.getCode())).thenReturn(null);
		
		countryEntity = new CountryEntity();
		countryServiceMapper.mapCountryToCountryEntity(country, countryEntity);
		CountryEntity countryEntitySaved = countryJpaRepository.save(countryEntity);
		
		Country countrySaved = countryFactoryForTest.newCountry();
		when(countryServiceMapper.mapCountryEntityToCountry(countryEntitySaved)).thenReturn(countrySaved);

		// When
		Country countryResult = countryService.create(country);

		// Then
		assertTrue(countryResult == countrySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Country country = countryFactoryForTest.newCountry();

		CountryEntity countryEntity = countryEntityFactoryForTest.newCountryEntity();
		when(countryJpaRepository.findOne(country.getCode())).thenReturn(countryEntity);

		// When
		Exception exception = null;
		try {
			countryService.create(country);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Country country = countryFactoryForTest.newCountry();

		CountryEntity countryEntity = countryEntityFactoryForTest.newCountryEntity();
		when(countryJpaRepository.findOne(country.getCode())).thenReturn(countryEntity);
		
		CountryEntity countryEntitySaved = countryEntityFactoryForTest.newCountryEntity();
		when(countryJpaRepository.save(countryEntity)).thenReturn(countryEntitySaved);
		
		Country countrySaved = countryFactoryForTest.newCountry();
		when(countryServiceMapper.mapCountryEntityToCountry(countryEntitySaved)).thenReturn(countrySaved);

		// When
		Country countryResult = countryService.update(country);

		// Then
		verify(countryServiceMapper).mapCountryToCountryEntity(country, countryEntity);
		assertTrue(countryResult == countrySaved);
	}

	@Test
	public void delete() {
		// Given
		String code = mockValues.nextString(2);

		// When
		countryService.delete(code);

		// Then
		verify(countryJpaRepository).delete(code);
		
	}

}
