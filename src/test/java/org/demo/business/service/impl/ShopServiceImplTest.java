/*
 * Created on 3 avr. 2014 ( Time 19:39:43 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Shop;
import org.demo.bean.jpa.ShopEntity;
import java.util.List;
import org.demo.business.service.mapping.ShopServiceMapper;
import org.demo.data.repository.jpa.ShopJpaRepository;
import org.demo.test.ShopFactoryForTest;
import org.demo.test.ShopEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ShopService
 */
@RunWith(MockitoJUnitRunner.class)
public class ShopServiceImplTest {

	@InjectMocks
	private ShopServiceImpl shopService;
	@Mock
	private ShopJpaRepository shopJpaRepository;
	@Mock
	private ShopServiceMapper shopServiceMapper;
	
	private ShopFactoryForTest shopFactoryForTest = new ShopFactoryForTest();

	private ShopEntityFactoryForTest shopEntityFactoryForTest = new ShopEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String code = mockValues.nextString(3);
		
		ShopEntity shopEntity = shopJpaRepository.findOne(code);
		
		Shop shop = shopFactoryForTest.newShop();
		when(shopServiceMapper.mapShopEntityToShop(shopEntity)).thenReturn(shop);

		// When
		Shop shopFound = shopService.findById(code);

		// Then
		assertEquals(shop.getCode(),shopFound.getCode());
	}

	@Test
	public void findAll() {
		// Given
		List<ShopEntity> shopEntitys = new ArrayList<ShopEntity>();
		ShopEntity shopEntity1 = shopEntityFactoryForTest.newShopEntity();
		shopEntitys.add(shopEntity1);
		ShopEntity shopEntity2 = shopEntityFactoryForTest.newShopEntity();
		shopEntitys.add(shopEntity2);
		when(shopJpaRepository.findAll()).thenReturn(shopEntitys);
		
		Shop shop1 = shopFactoryForTest.newShop();
		when(shopServiceMapper.mapShopEntityToShop(shopEntity1)).thenReturn(shop1);
		Shop shop2 = shopFactoryForTest.newShop();
		when(shopServiceMapper.mapShopEntityToShop(shopEntity2)).thenReturn(shop2);

		// When
		List<Shop> shopsFounds = shopService.findAll();

		// Then
		assertTrue(shop1 == shopsFounds.get(0));
		assertTrue(shop2 == shopsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Shop shop = shopFactoryForTest.newShop();

		ShopEntity shopEntity = shopEntityFactoryForTest.newShopEntity();
		when(shopJpaRepository.findOne(shop.getCode())).thenReturn(null);
		
		shopEntity = new ShopEntity();
		shopServiceMapper.mapShopToShopEntity(shop, shopEntity);
		ShopEntity shopEntitySaved = shopJpaRepository.save(shopEntity);
		
		Shop shopSaved = shopFactoryForTest.newShop();
		when(shopServiceMapper.mapShopEntityToShop(shopEntitySaved)).thenReturn(shopSaved);

		// When
		Shop shopResult = shopService.create(shop);

		// Then
		assertTrue(shopResult == shopSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Shop shop = shopFactoryForTest.newShop();

		ShopEntity shopEntity = shopEntityFactoryForTest.newShopEntity();
		when(shopJpaRepository.findOne(shop.getCode())).thenReturn(shopEntity);

		// When
		Exception exception = null;
		try {
			shopService.create(shop);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Shop shop = shopFactoryForTest.newShop();

		ShopEntity shopEntity = shopEntityFactoryForTest.newShopEntity();
		when(shopJpaRepository.findOne(shop.getCode())).thenReturn(shopEntity);
		
		ShopEntity shopEntitySaved = shopEntityFactoryForTest.newShopEntity();
		when(shopJpaRepository.save(shopEntity)).thenReturn(shopEntitySaved);
		
		Shop shopSaved = shopFactoryForTest.newShop();
		when(shopServiceMapper.mapShopEntityToShop(shopEntitySaved)).thenReturn(shopSaved);

		// When
		Shop shopResult = shopService.update(shop);

		// Then
		verify(shopServiceMapper).mapShopToShopEntity(shop, shopEntity);
		assertTrue(shopResult == shopSaved);
	}

	@Test
	public void delete() {
		// Given
		String code = mockValues.nextString(3);

		// When
		shopService.delete(code);

		// Then
		verify(shopJpaRepository).delete(code);
		
	}

}
