/*
 * Created on 3 avr. 2014 ( Time 19:39:43 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Synopsis;
import org.demo.bean.jpa.SynopsisEntity;
import org.demo.business.service.mapping.SynopsisServiceMapper;
import org.demo.data.repository.jpa.SynopsisJpaRepository;
import org.demo.test.SynopsisFactoryForTest;
import org.demo.test.SynopsisEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SynopsisService
 */
@RunWith(MockitoJUnitRunner.class)
public class SynopsisServiceImplTest {

	@InjectMocks
	private SynopsisServiceImpl synopsisService;
	@Mock
	private SynopsisJpaRepository synopsisJpaRepository;
	@Mock
	private SynopsisServiceMapper synopsisServiceMapper;
	
	private SynopsisFactoryForTest synopsisFactoryForTest = new SynopsisFactoryForTest();

	private SynopsisEntityFactoryForTest synopsisEntityFactoryForTest = new SynopsisEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer bookId = mockValues.nextInteger();
		
		SynopsisEntity synopsisEntity = synopsisJpaRepository.findOne(bookId);
		
		Synopsis synopsis = synopsisFactoryForTest.newSynopsis();
		when(synopsisServiceMapper.mapSynopsisEntityToSynopsis(synopsisEntity)).thenReturn(synopsis);

		// When
		Synopsis synopsisFound = synopsisService.findById(bookId);

		// Then
		assertEquals(synopsis.getBookId(),synopsisFound.getBookId());
	}

	@Test
	public void findAll() {
		// Given
		List<SynopsisEntity> synopsisEntitys = new ArrayList<SynopsisEntity>();
		SynopsisEntity synopsisEntity1 = synopsisEntityFactoryForTest.newSynopsisEntity();
		synopsisEntitys.add(synopsisEntity1);
		SynopsisEntity synopsisEntity2 = synopsisEntityFactoryForTest.newSynopsisEntity();
		synopsisEntitys.add(synopsisEntity2);
		when(synopsisJpaRepository.findAll()).thenReturn(synopsisEntitys);
		
		Synopsis synopsis1 = synopsisFactoryForTest.newSynopsis();
		when(synopsisServiceMapper.mapSynopsisEntityToSynopsis(synopsisEntity1)).thenReturn(synopsis1);
		Synopsis synopsis2 = synopsisFactoryForTest.newSynopsis();
		when(synopsisServiceMapper.mapSynopsisEntityToSynopsis(synopsisEntity2)).thenReturn(synopsis2);

		// When
		List<Synopsis> synopsissFounds = synopsisService.findAll();

		// Then
		assertTrue(synopsis1 == synopsissFounds.get(0));
		assertTrue(synopsis2 == synopsissFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Synopsis synopsis = synopsisFactoryForTest.newSynopsis();

		SynopsisEntity synopsisEntity = synopsisEntityFactoryForTest.newSynopsisEntity();
		when(synopsisJpaRepository.findOne(synopsis.getBookId())).thenReturn(null);
		
		synopsisEntity = new SynopsisEntity();
		synopsisServiceMapper.mapSynopsisToSynopsisEntity(synopsis, synopsisEntity);
		SynopsisEntity synopsisEntitySaved = synopsisJpaRepository.save(synopsisEntity);
		
		Synopsis synopsisSaved = synopsisFactoryForTest.newSynopsis();
		when(synopsisServiceMapper.mapSynopsisEntityToSynopsis(synopsisEntitySaved)).thenReturn(synopsisSaved);

		// When
		Synopsis synopsisResult = synopsisService.create(synopsis);

		// Then
		assertTrue(synopsisResult == synopsisSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Synopsis synopsis = synopsisFactoryForTest.newSynopsis();

		SynopsisEntity synopsisEntity = synopsisEntityFactoryForTest.newSynopsisEntity();
		when(synopsisJpaRepository.findOne(synopsis.getBookId())).thenReturn(synopsisEntity);

		// When
		Exception exception = null;
		try {
			synopsisService.create(synopsis);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Synopsis synopsis = synopsisFactoryForTest.newSynopsis();

		SynopsisEntity synopsisEntity = synopsisEntityFactoryForTest.newSynopsisEntity();
		when(synopsisJpaRepository.findOne(synopsis.getBookId())).thenReturn(synopsisEntity);
		
		SynopsisEntity synopsisEntitySaved = synopsisEntityFactoryForTest.newSynopsisEntity();
		when(synopsisJpaRepository.save(synopsisEntity)).thenReturn(synopsisEntitySaved);
		
		Synopsis synopsisSaved = synopsisFactoryForTest.newSynopsis();
		when(synopsisServiceMapper.mapSynopsisEntityToSynopsis(synopsisEntitySaved)).thenReturn(synopsisSaved);

		// When
		Synopsis synopsisResult = synopsisService.update(synopsis);

		// Then
		verify(synopsisServiceMapper).mapSynopsisToSynopsisEntity(synopsis, synopsisEntity);
		assertTrue(synopsisResult == synopsisSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer bookId = mockValues.nextInteger();

		// When
		synopsisService.delete(bookId);

		// Then
		verify(synopsisJpaRepository).delete(bookId);
		
	}

}
