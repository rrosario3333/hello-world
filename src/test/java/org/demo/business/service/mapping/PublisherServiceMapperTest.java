/*
 * Created on 3 avr. 2014 ( Time 19:39:43 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.Publisher;
import org.demo.bean.jpa.PublisherEntity;
import org.demo.bean.jpa.CountryEntity;
import org.demo.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class PublisherServiceMapperTest {

	private PublisherServiceMapper publisherServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		publisherServiceMapper = new PublisherServiceMapper();
		publisherServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'PublisherEntity' to 'Publisher'
	 * @param publisherEntity
	 */
	@Test
	public void testMapPublisherEntityToPublisher() {
		// Given
		PublisherEntity publisherEntity = new PublisherEntity();
		publisherEntity.setName(mockValues.nextString(45));
		publisherEntity.setEmail(mockValues.nextString(45));
		publisherEntity.setContact(mockValues.nextString(45));
		publisherEntity.setCity(mockValues.nextString(45));
		publisherEntity.setZipCode(mockValues.nextInteger());
		publisherEntity.setPhone(mockValues.nextString(14));
		publisherEntity.setCountry(new CountryEntity());
		publisherEntity.getCountry().setCode(mockValues.nextString(2));
		
		// When
		Publisher publisher = publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntity);
		
		// Then
		assertEquals(publisherEntity.getName(), publisher.getName());
		assertEquals(publisherEntity.getEmail(), publisher.getEmail());
		assertEquals(publisherEntity.getContact(), publisher.getContact());
		assertEquals(publisherEntity.getCity(), publisher.getCity());
		assertEquals(publisherEntity.getZipCode(), publisher.getZipCode());
		assertEquals(publisherEntity.getPhone(), publisher.getPhone());
		assertEquals(publisherEntity.getCountry().getCode(), publisher.getCountryCode());
	}
	
	/**
	 * Test : Mapping from 'Publisher' to 'PublisherEntity'
	 */
	@Test
	public void testMapPublisherToPublisherEntity() {
		// Given
		Publisher publisher = new Publisher();
		publisher.setName(mockValues.nextString(45));
		publisher.setEmail(mockValues.nextString(45));
		publisher.setContact(mockValues.nextString(45));
		publisher.setCity(mockValues.nextString(45));
		publisher.setZipCode(mockValues.nextInteger());
		publisher.setPhone(mockValues.nextString(14));
		publisher.setCountryCode(mockValues.nextString(2));

		PublisherEntity publisherEntity = new PublisherEntity();
		
		// When
		publisherServiceMapper.mapPublisherToPublisherEntity(publisher, publisherEntity);
		
		// Then
		assertEquals(publisher.getName(), publisherEntity.getName());
		assertEquals(publisher.getEmail(), publisherEntity.getEmail());
		assertEquals(publisher.getContact(), publisherEntity.getContact());
		assertEquals(publisher.getCity(), publisherEntity.getCity());
		assertEquals(publisher.getZipCode(), publisherEntity.getZipCode());
		assertEquals(publisher.getPhone(), publisherEntity.getPhone());
		assertEquals(publisher.getCountryCode(), publisherEntity.getCountry().getCode());
	}

}