/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.BookOrder;
import org.demo.bean.jpa.BookOrderEntity;
import org.demo.bean.jpa.ShopEntity;
import org.demo.bean.jpa.EmployeeEntity;
import org.demo.bean.jpa.CustomerEntity;
import org.demo.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class BookOrderServiceMapperTest {

	private BookOrderServiceMapper bookOrderServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		bookOrderServiceMapper = new BookOrderServiceMapper();
		bookOrderServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'BookOrderEntity' to 'BookOrder'
	 * @param bookOrderEntity
	 */
	@Test
	public void testMapBookOrderEntityToBookOrder() {
		// Given
		BookOrderEntity bookOrderEntity = new BookOrderEntity();
		bookOrderEntity.setDate(mockValues.nextDate());
		bookOrderEntity.setState(mockValues.nextInteger());
		bookOrderEntity.setShop(new ShopEntity());
		bookOrderEntity.getShop().setCode(mockValues.nextString(3));
		bookOrderEntity.setEmployee(new EmployeeEntity());
		bookOrderEntity.getEmployee().setCode(mockValues.nextString(4));
		bookOrderEntity.setCustomer(new CustomerEntity());
		bookOrderEntity.getCustomer().setCode(mockValues.nextString(5));
		
		// When
		BookOrder bookOrder = bookOrderServiceMapper.mapBookOrderEntityToBookOrder(bookOrderEntity);
		
		// Then
		assertEquals(bookOrderEntity.getDate(), bookOrder.getDate());
		assertEquals(bookOrderEntity.getState(), bookOrder.getState());
		assertEquals(bookOrderEntity.getShop().getCode(), bookOrder.getShopCode());
		assertEquals(bookOrderEntity.getEmployee().getCode(), bookOrder.getEmployeeCode());
		assertEquals(bookOrderEntity.getCustomer().getCode(), bookOrder.getCustomerCode());
	}
	
	/**
	 * Test : Mapping from 'BookOrder' to 'BookOrderEntity'
	 */
	@Test
	public void testMapBookOrderToBookOrderEntity() {
		// Given
		BookOrder bookOrder = new BookOrder();
		bookOrder.setDate(mockValues.nextDate());
		bookOrder.setState(mockValues.nextInteger());
		bookOrder.setShopCode(mockValues.nextString(3));
		bookOrder.setEmployeeCode(mockValues.nextString(4));
		bookOrder.setCustomerCode(mockValues.nextString(5));

		BookOrderEntity bookOrderEntity = new BookOrderEntity();
		
		// When
		bookOrderServiceMapper.mapBookOrderToBookOrderEntity(bookOrder, bookOrderEntity);
		
		// Then
		assertEquals(bookOrder.getDate(), bookOrderEntity.getDate());
		assertEquals(bookOrder.getState(), bookOrderEntity.getState());
		assertEquals(bookOrder.getShopCode(), bookOrderEntity.getShop().getCode());
		assertEquals(bookOrder.getEmployeeCode(), bookOrderEntity.getEmployee().getCode());
		assertEquals(bookOrder.getCustomerCode(), bookOrderEntity.getCustomer().getCode());
	}

}