/*
 * Created on 3 avr. 2014 ( Time 19:39:41 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.Badge;
import org.demo.bean.jpa.BadgeEntity;
import org.demo.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class BadgeServiceMapperTest {

	private BadgeServiceMapper badgeServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		badgeServiceMapper = new BadgeServiceMapper();
		badgeServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'BadgeEntity' to 'Badge'
	 * @param badgeEntity
	 */
	@Test
	public void testMapBadgeEntityToBadge() {
		// Given
		BadgeEntity badgeEntity = new BadgeEntity();
		badgeEntity.setAuthorizationLevel(mockValues.nextShort());
		badgeEntity.setEndOfValidity(mockValues.nextDate());
		
		// When
		Badge badge = badgeServiceMapper.mapBadgeEntityToBadge(badgeEntity);
		
		// Then
		assertEquals(badgeEntity.getAuthorizationLevel(), badge.getAuthorizationLevel());
		assertEquals(badgeEntity.getEndOfValidity(), badge.getEndOfValidity());
	}
	
	/**
	 * Test : Mapping from 'Badge' to 'BadgeEntity'
	 */
	@Test
	public void testMapBadgeToBadgeEntity() {
		// Given
		Badge badge = new Badge();
		badge.setAuthorizationLevel(mockValues.nextShort());
		badge.setEndOfValidity(mockValues.nextDate());

		BadgeEntity badgeEntity = new BadgeEntity();
		
		// When
		badgeServiceMapper.mapBadgeToBadgeEntity(badge, badgeEntity);
		
		// Then
		assertEquals(badge.getAuthorizationLevel(), badgeEntity.getAuthorizationLevel());
		assertEquals(badge.getEndOfValidity(), badgeEntity.getEndOfValidity());
	}

}