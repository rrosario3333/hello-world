/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.Customer;
import org.demo.bean.jpa.CustomerEntity;
import org.demo.bean.jpa.CountryEntity;
import org.demo.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class CustomerServiceMapperTest {

	private CustomerServiceMapper customerServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		customerServiceMapper = new CustomerServiceMapper();
		customerServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'CustomerEntity' to 'Customer'
	 * @param customerEntity
	 */
	@Test
	public void testMapCustomerEntityToCustomer() {
		// Given
		CustomerEntity customerEntity = new CustomerEntity();
		customerEntity.setFirstName(mockValues.nextString(40));
		customerEntity.setLastName(mockValues.nextString(40));
		customerEntity.setLogin(mockValues.nextString(20));
		customerEntity.setPassword(mockValues.nextString(20));
		customerEntity.setAge(mockValues.nextInteger());
		customerEntity.setCity(mockValues.nextString(45));
		customerEntity.setZipCode(mockValues.nextInteger());
		customerEntity.setPhone(mockValues.nextString(20));
		customerEntity.setReviewer(mockValues.nextShort());
		customerEntity.setCountry(new CountryEntity());
		customerEntity.getCountry().setCode(mockValues.nextString(2));
		
		// When
		Customer customer = customerServiceMapper.mapCustomerEntityToCustomer(customerEntity);
		
		// Then
		assertEquals(customerEntity.getFirstName(), customer.getFirstName());
		assertEquals(customerEntity.getLastName(), customer.getLastName());
		assertEquals(customerEntity.getLogin(), customer.getLogin());
		assertEquals(customerEntity.getPassword(), customer.getPassword());
		assertEquals(customerEntity.getAge(), customer.getAge());
		assertEquals(customerEntity.getCity(), customer.getCity());
		assertEquals(customerEntity.getZipCode(), customer.getZipCode());
		assertEquals(customerEntity.getPhone(), customer.getPhone());
		assertEquals(customerEntity.getReviewer(), customer.getReviewer());
		assertEquals(customerEntity.getCountry().getCode(), customer.getCountryCode());
	}
	
	/**
	 * Test : Mapping from 'Customer' to 'CustomerEntity'
	 */
	@Test
	public void testMapCustomerToCustomerEntity() {
		// Given
		Customer customer = new Customer();
		customer.setFirstName(mockValues.nextString(40));
		customer.setLastName(mockValues.nextString(40));
		customer.setLogin(mockValues.nextString(20));
		customer.setPassword(mockValues.nextString(20));
		customer.setAge(mockValues.nextInteger());
		customer.setCity(mockValues.nextString(45));
		customer.setZipCode(mockValues.nextInteger());
		customer.setPhone(mockValues.nextString(20));
		customer.setReviewer(mockValues.nextShort());
		customer.setCountryCode(mockValues.nextString(2));

		CustomerEntity customerEntity = new CustomerEntity();
		
		// When
		customerServiceMapper.mapCustomerToCustomerEntity(customer, customerEntity);
		
		// Then
		assertEquals(customer.getFirstName(), customerEntity.getFirstName());
		assertEquals(customer.getLastName(), customerEntity.getLastName());
		assertEquals(customer.getLogin(), customerEntity.getLogin());
		assertEquals(customer.getPassword(), customerEntity.getPassword());
		assertEquals(customer.getAge(), customerEntity.getAge());
		assertEquals(customer.getCity(), customerEntity.getCity());
		assertEquals(customer.getZipCode(), customerEntity.getZipCode());
		assertEquals(customer.getPhone(), customerEntity.getPhone());
		assertEquals(customer.getReviewer(), customerEntity.getReviewer());
		assertEquals(customer.getCountryCode(), customerEntity.getCountry().getCode());
	}

}