/*
 * Created on 3 avr. 2014 ( Time 19:39:43 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.Shop;
import org.demo.bean.jpa.ShopEntity;
import org.demo.bean.jpa.EmployeeEntity;
import org.demo.bean.jpa.CountryEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ShopServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ShopServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ShopEntity' to 'Shop'
	 * @param shopEntity
	 */
	public Shop mapShopEntityToShop(ShopEntity shopEntity) {
		if(shopEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Shop shop = map(shopEntity, Shop.class);

		//--- Link mapping ( link to Employee )
		if(shopEntity.getEmployee() != null) {
			shop.setExecutive(shopEntity.getEmployee().getCode());
		}
		//--- Link mapping ( link to Country )
		if(shopEntity.getCountry() != null) {
			shop.setCountryCode(shopEntity.getCountry().getCode());
		}
		return shop;
	}
	
	/**
	 * Mapping from 'Shop' to 'ShopEntity'
	 * @param shop
	 * @param shopEntity
	 */
	public void mapShopToShopEntity(Shop shop, ShopEntity shopEntity) {
		if(shop == null) {
			return;
		}

		//--- Generic mapping 
		map(shop, shopEntity);

		//--- Link mapping ( link : shop )
		if( hasLinkToEmployee(shop) ) {
			EmployeeEntity employee1 = new EmployeeEntity();
			employee1.setCode( shop.getExecutive() );
			shopEntity.setEmployee( employee1 );
		} else {
			shopEntity.setEmployee( null );
		}

		//--- Link mapping ( link : shop )
		if( hasLinkToCountry(shop) ) {
			CountryEntity country2 = new CountryEntity();
			country2.setCode( shop.getCountryCode() );
			shopEntity.setCountry( country2 );
		} else {
			shopEntity.setCountry( null );
		}

	}
	
	/**
	 * Verify that Employee id is valid.
	 * @param Employee Employee
	 * @return boolean
	 */
	private boolean hasLinkToEmployee(Shop shop) {
		if(shop.getExecutive() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Country id is valid.
	 * @param Country Country
	 * @return boolean
	 */
	private boolean hasLinkToCountry(Shop shop) {
		if(shop.getCountryCode() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}