/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.BookOrder;
import org.demo.bean.jpa.BookOrderEntity;
import org.demo.bean.jpa.ShopEntity;
import org.demo.bean.jpa.EmployeeEntity;
import org.demo.bean.jpa.CustomerEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class BookOrderServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public BookOrderServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'BookOrderEntity' to 'BookOrder'
	 * @param bookOrderEntity
	 */
	public BookOrder mapBookOrderEntityToBookOrder(BookOrderEntity bookOrderEntity) {
		if(bookOrderEntity == null) {
			return null;
		}

		//--- Generic mapping 
		BookOrder bookOrder = map(bookOrderEntity, BookOrder.class);

		//--- Link mapping ( link to Shop )
		if(bookOrderEntity.getShop() != null) {
			bookOrder.setShopCode(bookOrderEntity.getShop().getCode());
		}
		//--- Link mapping ( link to Employee )
		if(bookOrderEntity.getEmployee() != null) {
			bookOrder.setEmployeeCode(bookOrderEntity.getEmployee().getCode());
		}
		//--- Link mapping ( link to Customer )
		if(bookOrderEntity.getCustomer() != null) {
			bookOrder.setCustomerCode(bookOrderEntity.getCustomer().getCode());
		}
		return bookOrder;
	}
	
	/**
	 * Mapping from 'BookOrder' to 'BookOrderEntity'
	 * @param bookOrder
	 * @param bookOrderEntity
	 */
	public void mapBookOrderToBookOrderEntity(BookOrder bookOrder, BookOrderEntity bookOrderEntity) {
		if(bookOrder == null) {
			return;
		}

		//--- Generic mapping 
		map(bookOrder, bookOrderEntity);

		//--- Link mapping ( link : bookOrder )
		if( hasLinkToShop(bookOrder) ) {
			ShopEntity shop1 = new ShopEntity();
			shop1.setCode( bookOrder.getShopCode() );
			bookOrderEntity.setShop( shop1 );
		} else {
			bookOrderEntity.setShop( null );
		}

		//--- Link mapping ( link : bookOrder )
		if( hasLinkToEmployee(bookOrder) ) {
			EmployeeEntity employee2 = new EmployeeEntity();
			employee2.setCode( bookOrder.getEmployeeCode() );
			bookOrderEntity.setEmployee( employee2 );
		} else {
			bookOrderEntity.setEmployee( null );
		}

		//--- Link mapping ( link : bookOrder )
		if( hasLinkToCustomer(bookOrder) ) {
			CustomerEntity customer3 = new CustomerEntity();
			customer3.setCode( bookOrder.getCustomerCode() );
			bookOrderEntity.setCustomer( customer3 );
		} else {
			bookOrderEntity.setCustomer( null );
		}

	}
	
	/**
	 * Verify that Shop id is valid.
	 * @param Shop Shop
	 * @return boolean
	 */
	private boolean hasLinkToShop(BookOrder bookOrder) {
		if(bookOrder.getShopCode() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Employee id is valid.
	 * @param Employee Employee
	 * @return boolean
	 */
	private boolean hasLinkToEmployee(BookOrder bookOrder) {
		if(bookOrder.getEmployeeCode() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Customer id is valid.
	 * @param Customer Customer
	 * @return boolean
	 */
	private boolean hasLinkToCustomer(BookOrder bookOrder) {
		if(bookOrder.getCustomerCode() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}