/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.Employee;
import org.demo.bean.jpa.EmployeeEntity;
import org.demo.bean.jpa.ShopEntity;
import org.demo.bean.jpa.BadgeEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class EmployeeServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public EmployeeServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'EmployeeEntity' to 'Employee'
	 * @param employeeEntity
	 */
	public Employee mapEmployeeEntityToEmployee(EmployeeEntity employeeEntity) {
		if(employeeEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Employee employee = map(employeeEntity, Employee.class);

		//--- Link mapping ( link to Shop )
		if(employeeEntity.getShop() != null) {
			employee.setShopCode(employeeEntity.getShop().getCode());
		}
		//--- Link mapping ( link to Badge )
		if(employeeEntity.getBadge() != null) {
			employee.setBadgeNumber(employeeEntity.getBadge().getBadgeNumber());
		}
		return employee;
	}
	
	/**
	 * Mapping from 'Employee' to 'EmployeeEntity'
	 * @param employee
	 * @param employeeEntity
	 */
	public void mapEmployeeToEmployeeEntity(Employee employee, EmployeeEntity employeeEntity) {
		if(employee == null) {
			return;
		}

		//--- Generic mapping 
		map(employee, employeeEntity);

		//--- Link mapping ( link : employee )
		if( hasLinkToShop(employee) ) {
			ShopEntity shop1 = new ShopEntity();
			shop1.setCode( employee.getShopCode() );
			employeeEntity.setShop( shop1 );
		} else {
			employeeEntity.setShop( null );
		}

		//--- Link mapping ( link : employee )
		if( hasLinkToBadge(employee) ) {
			BadgeEntity badge2 = new BadgeEntity();
			badge2.setBadgeNumber( employee.getBadgeNumber() );
			employeeEntity.setBadge( badge2 );
		} else {
			employeeEntity.setBadge( null );
		}

	}
	
	/**
	 * Verify that Shop id is valid.
	 * @param Shop Shop
	 * @return boolean
	 */
	private boolean hasLinkToShop(Employee employee) {
		if(employee.getShopCode() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Badge id is valid.
	 * @param Badge Badge
	 * @return boolean
	 */
	private boolean hasLinkToBadge(Employee employee) {
		if(employee.getBadgeNumber() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}