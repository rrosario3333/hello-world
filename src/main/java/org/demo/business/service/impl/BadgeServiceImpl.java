/*
 * Created on 3 avr. 2014 ( Time 19:39:41 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.Badge;
import org.demo.bean.jpa.BadgeEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.BadgeService;
import org.demo.business.service.mapping.BadgeServiceMapper;
import org.demo.data.repository.jpa.BadgeJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of BadgeService
 */
@Component
@Transactional
public class BadgeServiceImpl implements BadgeService {

	@Resource
	private BadgeJpaRepository badgeJpaRepository;

	@Resource
	private BadgeServiceMapper badgeServiceMapper;
	
	@Override
	public Badge findById(Integer badgeNumber) {
		BadgeEntity badgeEntity = badgeJpaRepository.findOne(badgeNumber);
		return badgeServiceMapper.mapBadgeEntityToBadge(badgeEntity);
	}

	@Override
	public List<Badge> findAll() {
		Iterable<BadgeEntity> entities = badgeJpaRepository.findAll();
		List<Badge> beans = new ArrayList<Badge>();
		for(BadgeEntity badgeEntity : entities) {
			beans.add(badgeServiceMapper.mapBadgeEntityToBadge(badgeEntity));
		}
		return beans;
	}

	@Override
	public Badge save(Badge badge) {
		return update(badge) ;
	}

	@Override
	public Badge create(Badge badge) {
		BadgeEntity badgeEntity = badgeJpaRepository.findOne(badge.getBadgeNumber());
		if( badgeEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		badgeEntity = new BadgeEntity();
		badgeServiceMapper.mapBadgeToBadgeEntity(badge, badgeEntity);
		BadgeEntity badgeEntitySaved = badgeJpaRepository.save(badgeEntity);
		return badgeServiceMapper.mapBadgeEntityToBadge(badgeEntitySaved);
	}

	@Override
	public Badge update(Badge badge) {
		BadgeEntity badgeEntity = badgeJpaRepository.findOne(badge.getBadgeNumber());
		badgeServiceMapper.mapBadgeToBadgeEntity(badge, badgeEntity);
		BadgeEntity badgeEntitySaved = badgeJpaRepository.save(badgeEntity);
		return badgeServiceMapper.mapBadgeEntityToBadge(badgeEntitySaved);
	}

	@Override
	public void delete(Integer badgeNumber) {
		badgeJpaRepository.delete(badgeNumber);
	}

	public BadgeJpaRepository getBadgeJpaRepository() {
		return badgeJpaRepository;
	}

	public void setBadgeJpaRepository(BadgeJpaRepository badgeJpaRepository) {
		this.badgeJpaRepository = badgeJpaRepository;
	}

	public BadgeServiceMapper getBadgeServiceMapper() {
		return badgeServiceMapper;
	}

	public void setBadgeServiceMapper(BadgeServiceMapper badgeServiceMapper) {
		this.badgeServiceMapper = badgeServiceMapper;
	}

}
