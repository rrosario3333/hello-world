/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.Publisher;
import org.demo.bean.jpa.PublisherEntity;
import java.util.List;
import org.demo.business.service.PublisherService;
import org.demo.business.service.mapping.PublisherServiceMapper;
import org.demo.data.repository.jpa.PublisherJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of PublisherService
 */
@Component
@Transactional
public class PublisherServiceImpl implements PublisherService {

	@Resource
	private PublisherJpaRepository publisherJpaRepository;

	@Resource
	private PublisherServiceMapper publisherServiceMapper;
	
	@Override
	public Publisher findById(Integer code) {
		PublisherEntity publisherEntity = publisherJpaRepository.findOne(code);
		return publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntity);
	}

	@Override
	public List<Publisher> findAll() {
		Iterable<PublisherEntity> entities = publisherJpaRepository.findAll();
		List<Publisher> beans = new ArrayList<Publisher>();
		for(PublisherEntity publisherEntity : entities) {
			beans.add(publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntity));
		}
		return beans;
	}

	@Override
	public Publisher save(Publisher publisher) {
		return update(publisher) ;
	}

	@Override
	public Publisher create(Publisher publisher) {
		PublisherEntity publisherEntity = publisherJpaRepository.findOne(publisher.getCode());
		if( publisherEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		publisherEntity = new PublisherEntity();
		publisherServiceMapper.mapPublisherToPublisherEntity(publisher, publisherEntity);
		PublisherEntity publisherEntitySaved = publisherJpaRepository.save(publisherEntity);
		return publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntitySaved);
	}

	@Override
	public Publisher update(Publisher publisher) {
		PublisherEntity publisherEntity = publisherJpaRepository.findOne(publisher.getCode());
		publisherServiceMapper.mapPublisherToPublisherEntity(publisher, publisherEntity);
		PublisherEntity publisherEntitySaved = publisherJpaRepository.save(publisherEntity);
		return publisherServiceMapper.mapPublisherEntityToPublisher(publisherEntitySaved);
	}

	@Override
	public void delete(Integer code) {
		publisherJpaRepository.delete(code);
	}

	public PublisherJpaRepository getPublisherJpaRepository() {
		return publisherJpaRepository;
	}

	public void setPublisherJpaRepository(PublisherJpaRepository publisherJpaRepository) {
		this.publisherJpaRepository = publisherJpaRepository;
	}

	public PublisherServiceMapper getPublisherServiceMapper() {
		return publisherServiceMapper;
	}

	public void setPublisherServiceMapper(PublisherServiceMapper publisherServiceMapper) {
		this.publisherServiceMapper = publisherServiceMapper;
	}

}
