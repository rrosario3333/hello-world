/*
 * Created on 3 avr. 2014 ( Time 19:39:42 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.BookOrderItem;
import org.demo.bean.jpa.BookOrderItemEntity;
import org.demo.bean.jpa.BookOrderItemEntityKey;
import java.math.BigDecimal;
import org.demo.business.service.BookOrderItemService;
import org.demo.business.service.mapping.BookOrderItemServiceMapper;
import org.demo.data.repository.jpa.BookOrderItemJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of BookOrderItemService
 */
@Component
@Transactional
public class BookOrderItemServiceImpl implements BookOrderItemService {

	@Resource
	private BookOrderItemJpaRepository bookOrderItemJpaRepository;

	@Resource
	private BookOrderItemServiceMapper bookOrderItemServiceMapper;
	
	@Override
	public BookOrderItem findById(Integer bookOrderId, Integer bookId) {
		BookOrderItemEntityKey id = new BookOrderItemEntityKey(bookOrderId, bookId);
		BookOrderItemEntity bookOrderItemEntity = bookOrderItemJpaRepository.findOne(id);
		return bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntity);
	}

	@Override
	public List<BookOrderItem> findAll() {
		Iterable<BookOrderItemEntity> entities = bookOrderItemJpaRepository.findAll();
		List<BookOrderItem> beans = new ArrayList<BookOrderItem>();
		for(BookOrderItemEntity bookOrderItemEntity : entities) {
			beans.add(bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntity));
		}
		return beans;
	}

	@Override
	public BookOrderItem save(BookOrderItem bookOrderItem) {
		return update(bookOrderItem) ;
	}

	@Override
	public BookOrderItem create(BookOrderItem bookOrderItem) {
		BookOrderItemEntityKey id = new BookOrderItemEntityKey(bookOrderItem.getBookOrderId(), bookOrderItem.getBookId());
		BookOrderItemEntity bookOrderItemEntity = bookOrderItemJpaRepository.findOne(id);
		if( bookOrderItemEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		bookOrderItemEntity = new BookOrderItemEntity();
		bookOrderItemServiceMapper.mapBookOrderItemToBookOrderItemEntity(bookOrderItem, bookOrderItemEntity);
		BookOrderItemEntity bookOrderItemEntitySaved = bookOrderItemJpaRepository.save(bookOrderItemEntity);
		return bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntitySaved);
	}

	@Override
	public BookOrderItem update(BookOrderItem bookOrderItem) {
		BookOrderItemEntityKey id = new BookOrderItemEntityKey(bookOrderItem.getBookOrderId(), bookOrderItem.getBookId());
		BookOrderItemEntity bookOrderItemEntity = bookOrderItemJpaRepository.findOne(id);
		bookOrderItemServiceMapper.mapBookOrderItemToBookOrderItemEntity(bookOrderItem, bookOrderItemEntity);
		BookOrderItemEntity bookOrderItemEntitySaved = bookOrderItemJpaRepository.save(bookOrderItemEntity);
		return bookOrderItemServiceMapper.mapBookOrderItemEntityToBookOrderItem(bookOrderItemEntitySaved);
	}

	@Override
	public void delete(Integer bookOrderId, Integer bookId) {
		BookOrderItemEntityKey id = new BookOrderItemEntityKey(bookOrderId, bookId);
		bookOrderItemJpaRepository.delete(id);
	}

	public BookOrderItemJpaRepository getBookOrderItemJpaRepository() {
		return bookOrderItemJpaRepository;
	}

	public void setBookOrderItemJpaRepository(BookOrderItemJpaRepository bookOrderItemJpaRepository) {
		this.bookOrderItemJpaRepository = bookOrderItemJpaRepository;
	}

	public BookOrderItemServiceMapper getBookOrderItemServiceMapper() {
		return bookOrderItemServiceMapper;
	}

	public void setBookOrderItemServiceMapper(BookOrderItemServiceMapper bookOrderItemServiceMapper) {
		this.bookOrderItemServiceMapper = bookOrderItemServiceMapper;
	}

}
