/*
 * Created on 3 avr. 2014 ( Time 19:39:49 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.demo.bean.BookOrder;
import org.demo.business.service.BookOrderService;
import org.demo.web.listitem.BookOrderListItem;

/**
 * Spring MVC controller for 'BookOrder' management.
 */
@Controller
public class BookOrderRestController {

	@Resource
	private BookOrderService bookOrderService;
	
	@RequestMapping( value="/items/bookOrder",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<BookOrderListItem> findAllAsListItems() {
		List<BookOrder> list = bookOrderService.findAll();
		List<BookOrderListItem> items = new LinkedList<BookOrderListItem>();
		for ( BookOrder bookOrder : list ) {
			items.add(new BookOrderListItem( bookOrder ) );
		}
		return items;
	}
	
	@RequestMapping( value="/bookOrder",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<BookOrder> findAll() {
		return bookOrderService.findAll();
	}

	@RequestMapping( value="/bookOrder/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public BookOrder findOne(@PathVariable("id") Integer id) {
		return bookOrderService.findById(id);
	}
	
	@RequestMapping( value="/bookOrder",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public BookOrder create(@RequestBody BookOrder bookOrder) {
		return bookOrderService.create(bookOrder);
	}

	@RequestMapping( value="/bookOrder/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public BookOrder update(@PathVariable("id") Integer id, @RequestBody BookOrder bookOrder) {
		return bookOrderService.update(bookOrder);
	}

	@RequestMapping( value="/bookOrder/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		bookOrderService.delete(id);
	}
	
}
