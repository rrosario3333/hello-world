/*
 * Created on 3 avr. 2014 ( Time 19:39:50 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.demo.bean.Publisher;
import org.demo.business.service.PublisherService;
import org.demo.web.listitem.PublisherListItem;

/**
 * Spring MVC controller for 'Publisher' management.
 */
@Controller
public class PublisherRestController {

	@Resource
	private PublisherService publisherService;
	
	@RequestMapping( value="/items/publisher",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<PublisherListItem> findAllAsListItems() {
		List<Publisher> list = publisherService.findAll();
		List<PublisherListItem> items = new LinkedList<PublisherListItem>();
		for ( Publisher publisher : list ) {
			items.add(new PublisherListItem( publisher ) );
		}
		return items;
	}
	
	@RequestMapping( value="/publisher",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Publisher> findAll() {
		return publisherService.findAll();
	}

	@RequestMapping( value="/publisher/{code}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Publisher findOne(@PathVariable("code") Integer code) {
		return publisherService.findById(code);
	}
	
	@RequestMapping( value="/publisher",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Publisher create(@RequestBody Publisher publisher) {
		return publisherService.create(publisher);
	}

	@RequestMapping( value="/publisher/{code}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Publisher update(@PathVariable("code") Integer code, @RequestBody Publisher publisher) {
		return publisherService.update(publisher);
	}

	@RequestMapping( value="/publisher/{code}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("code") Integer code) {
		publisherService.delete(code);
	}
	
}
