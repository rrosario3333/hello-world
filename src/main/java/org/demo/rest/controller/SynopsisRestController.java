/*
 * Created on 3 avr. 2014 ( Time 19:39:50 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.demo.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.demo.bean.Synopsis;
import org.demo.business.service.SynopsisService;
import org.demo.web.listitem.SynopsisListItem;

/**
 * Spring MVC controller for 'Synopsis' management.
 */
@Controller
public class SynopsisRestController {

	@Resource
	private SynopsisService synopsisService;
	
	@RequestMapping( value="/items/synopsis",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<SynopsisListItem> findAllAsListItems() {
		List<Synopsis> list = synopsisService.findAll();
		List<SynopsisListItem> items = new LinkedList<SynopsisListItem>();
		for ( Synopsis synopsis : list ) {
			items.add(new SynopsisListItem( synopsis ) );
		}
		return items;
	}
	
	@RequestMapping( value="/synopsis",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Synopsis> findAll() {
		return synopsisService.findAll();
	}

	@RequestMapping( value="/synopsis/{bookId}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Synopsis findOne(@PathVariable("bookId") Integer bookId) {
		return synopsisService.findById(bookId);
	}
	
	@RequestMapping( value="/synopsis",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Synopsis create(@RequestBody Synopsis synopsis) {
		return synopsisService.create(synopsis);
	}

	@RequestMapping( value="/synopsis/{bookId}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Synopsis update(@PathVariable("bookId") Integer bookId, @RequestBody Synopsis synopsis) {
		return synopsisService.update(synopsis);
	}

	@RequestMapping( value="/synopsis/{bookId}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("bookId") Integer bookId) {
		synopsisService.delete(bookId);
	}
	
}
